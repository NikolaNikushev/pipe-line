//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
namespace Flowly
{
    /// <summary>
    /// "ConnectionPoint" is the place where each "Component" is connected with another one.
    /// </summary>
    public class ConnectionPoint
    {
        private Point coordinatesUpperLeftCorner; // will be set by the constructor

        private Point coordinatesBottomRightCorner; // will be set by the constructor

        private float currentFlow; // will be set by the constructor - with method used

        private bool isOutput; // will be set by the constructor

        private ComponentDrawn componentDrawnBelong; //will be set by the constructor

        private bool isAvailable; //automatically set by the constructor when created - of course false

        


        public ConnectionPoint(float theGivenCurrentFlow, Point theCoordinatesUpperLeftCorner, Point theCoordinatesBottomRightCorner,
            bool theIsOutput, ComponentDrawn theComponentDrawnBelong)
        {
            SetAvailable(false);
            SetCurrentFlow(theGivenCurrentFlow);
            coordinatesBottomRightCorner = theCoordinatesBottomRightCorner;
            coordinatesUpperLeftCorner = theCoordinatesUpperLeftCorner;
            isOutput = theIsOutput;
            componentDrawnBelong = theComponentDrawnBelong;

        }

        /// <summary>
        /// Sets availability of a "ConnectionPoint".
        /// </summary>
        /// <param name="givenAvailable"></param>
        /// <returns>True if successfull, false otherwise</returns>
        public virtual bool SetAvailable(bool givenAvailable)
        {
            try
            {
                isAvailable = givenAvailable;
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Sets the current flow going through the "ConnectionPoint". Current flow means the amount of gas
        /// or liquid going through at the moment.
        /// </summary>
        /// <param name="givenFlow"></param>
        /// <returns>True if successfull, false otherwise</returns>
        public virtual bool SetCurrentFlow(float givenFlow)
        {
            try
            {
                currentFlow = givenFlow;
                return true;
            }
            catch
            {
                return false;
            }
        }

    }

}