//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;


namespace Flowly
{
    /// <summary>
    /// ComponentDrawn class is meant for the components that the program will have. Components as pipe, sink, merger and so on.
    /// </summary>
    public abstract class ComponentDrawn   // the class will be abstract, we will create separate instances of each sub class, polymorphism will be used
    {
        protected List<ConnectionPoint> listOfConnectionPoints;

        protected Point coordinatesUpperLeftCorner; // will be set by the constructor

        protected Point coordinatesBottomRightCorner; // will be set by the constructor

        protected List<PropertiesEnum> listOfProperties; // will be used separately in each sub-class

        protected Direction direction; // // will be used separately in each sub-class

        protected Image imageSource; // will be used separately in each sub-class

        protected List<ComponentDrawn> listOfComponentDrawn;

        protected bool diffCurrFlowPossible; // will be used separately in each sub-class

        protected float capacity; // will be used separately in each sub-class

        protected float currentFlow;

        protected Rectangle rectangle;

        public virtual IEnumerable<ConnectionPoint> ConnectionPoint
        {
            get;
            set;
        }
        public ComponentDrawn(Point theUpperLeftCorner, Point theBottomRightCorner, Direction theDirection, Image theImageSource,
            bool theDiffCurrFlowPossible, float theCapacity, float theCurrentFlow)
        {
            listOfConnectionPoints = new List<ConnectionPoint>();
            listOfComponentDrawn = new List<ComponentDrawn>();
            coordinatesUpperLeftCorner = theUpperLeftCorner;
            coordinatesBottomRightCorner = theBottomRightCorner;
            listOfProperties = new List<PropertiesEnum>();
            direction = theDirection;
            imageSource = theImageSource;
            diffCurrFlowPossible = theDiffCurrFlowPossible;
            capacity = theCapacity;
            currentFlow = theCurrentFlow;
            rectangle.X = theUpperLeftCorner.X;
            rectangle.Y = theUpperLeftCorner.Y;
            rectangle.Width = rectangle.X


        }

        /// <summary>
        /// Adds neighbour component to listOfComponentDrawn list. 
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise</returns>
        public virtual bool AddComponentDrawnToList(ComponentDrawn givenComponent)
        {
            try
            {
                listOfComponentDrawn.Add(givenComponent);
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// Automatically creates connection points of a component depending on its type.
        /// </summary>
        /// <returns>True if successfull, false otherwise.</returns>
        public abstract bool CreateConnectionPoints();
        
            
        

        /// <summary>
        /// Sets the current flow (the amount of gas/liquid) going through the component.
        /// </summary>
        /// <param name="givenFlow"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool SetCurrentFlow(float givenFlow)
        {
           try
            {
                currentFlow = givenFlow;
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// The opposite action of method AddComponentDrawnToList.
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool RemoveComponentDrawnFromList(ComponentDrawn givenComponent)
        {
            try
            {
                listOfComponentDrawn.Remove(givenComponent);
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Sets the diffCurrFlowPossible attribute to true or false.
        /// </summary>
        /// <param name="givenPosibility"></param>
        /// <returns>True if successfull, false otherwise</returns>
        public abstract bool SetDiffCurrFlowPossible(bool givenPosibility);
       
            
       

    }
}

