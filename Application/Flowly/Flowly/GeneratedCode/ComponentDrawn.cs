//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;


namespace Flowly
{
    /// <summary>
    /// ComponentDrawn class is meant for the components that the program will have. Components as pipe, sink, merger and so on.
    /// </summary>
    public abstract class ComponentDrawn  
    {
        protected List<ConnectionPoint> listOfConnectionPoints;

        protected List<PropertiesEnum> listOfProperties; 
        
        protected List<ComponentDrawn> listOfComponentDrawn; 

        protected bool diffCurrFlowPossible;

        protected float capacity; 

        protected float currentFlow;

        protected Rectangle rectangleBig;
        

    
        public ComponentDrawn(Rectangle theRectangle)
        {
            listOfConnectionPoints = new List<ConnectionPoint>();
            listOfProperties = new List<PropertiesEnum>();
            listOfComponentDrawn = new List<ComponentDrawn>();
            SetCapacity(0);
            SetCurrentFlow(0);
            rectangleBig = theRectangle;
            diffCurrFlowPossible = false;

        }

        /// <summary>
        /// Adds neighbour component to listOfComponentDrawn list. 
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise</returns>
        public virtual bool AddComponentDrawnToList(ComponentDrawn givenComponent)
        {
            try
            {
                listOfComponentDrawn.Add(givenComponent);
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// Automatically creates connection points of a component depending on its type.
        /// </summary>
        /// <returns>True if successfull, false otherwise.</returns>
        public abstract bool CreateConnectionPoints();
        
            
        

        /// <summary>
        /// Sets the current flow (the amount of gas/liquid) going through the component.
        /// </summary>
        /// <param name="givenFlow"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool SetCurrentFlow(float givenFlow)
        {
           try
            {
                currentFlow = givenFlow;
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// The opposite action of method AddComponentDrawnToList.
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool RemoveComponentDrawnFromList(ComponentDrawn givenComponent)
        {
            try
            {
                listOfComponentDrawn.Remove(givenComponent);
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Sets the diffCurrFlowPossible attribute to true or false.
        /// </summary>
        /// <param name="givenPosibility"></param>
        /// <returns>True if successfull, false otherwise</returns>


        public virtual bool SetCapacity(float givenCapacity)
        {
            try
            {
                capacity = givenCapacity;
                return true;
            }
            catch
            {
                return false;
            }
        }

        public List<ConnectionPoint> GiveMeYourConnectionPoints()
        {
            return listOfConnectionPoints;
        }
    }
}

