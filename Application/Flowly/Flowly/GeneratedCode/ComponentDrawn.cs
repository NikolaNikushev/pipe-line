//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using Flowly.GeneratedCode;

namespace Flowly
{
    [Serializable]
    /// <summary>
    /// ComponentDrawn class is meant for the components that the program will have. Components as pipe, sink, merger and so on.
    /// </summary>
    public abstract class ComponentDrawn
    {
        protected List<ConnectionPoint> listOfConnectionPoints;

        

        protected List<ComponentDrawn> listOfComponentDrawn;

        protected Image imageResource;

        protected bool diffCurrFlowPossible;

        protected float capacity;

        protected float currentFlow;

        protected Rectangle rectangleBig;

        private bool flowWasUpdated;

        public bool FlowWasUpdated
        {
            get { return flowWasUpdated; }
            set { flowWasUpdated = value; }
        }



        private List<EditablePropertiesEnum> editableProperties;

        public List<EditablePropertiesEnum> EditableProperties
        {
            get { return editableProperties; }
            private set { editableProperties = value; }
        }


        public Rectangle RectangleBig { get { return rectangleBig; } }
        public float Capacity { get { return capacity; } }
        public float CurrentFlow { get { return currentFlow; } }
        public bool DiffCurrFlowPossible { get { return diffCurrFlowPossible; } }
        public Image Image { get { return this.imageResource; } }
        public ComponentDrawn(Rectangle theRectangle)
        {
            listOfConnectionPoints = new List<ConnectionPoint>();
            EditableProperties = new List<EditablePropertiesEnum>();
            listOfComponentDrawn = new List<ComponentDrawn>();
           
            rectangleBig = theRectangle;
            diffCurrFlowPossible = false;

        }

        /// <summary>
        /// Adds neighbour component to listOfComponentDrawn list. 
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise</returns>
        public virtual bool AddComponentDrawnToList(ComponentDrawn givenComponent)
        {
            try
            {
                listOfComponentDrawn.Add(givenComponent);
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// Automatically creates connection points of a component depending on its type.
        /// </summary>
        /// <returns>True if successfull, false otherwise.</returns>
        public abstract bool CreateConnectionPoints();




        /// <summary>
        /// Sets the current flow (the amount of gas/liquid) going through the component.
        /// </summary>
        /// <param name="givenFlow"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool SetCurrentFlow(float givenFlow)
        {
            try
            {
                currentFlow = givenFlow;
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// The opposite action of method AddComponentDrawnToList.
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool RemoveComponentDrawnFromList(ComponentDrawn givenComponent)
        {
            try
            {
                listOfComponentDrawn.Remove(givenComponent);
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Sets the diffCurrFlowPossible attribute to true or false.
        /// </summary>
        /// <param name="givenPosibility"></param>
        /// <returns>True if successfull, false otherwise</returns>


        public virtual bool SetCapacity(float givenCapacity)
        {
            try
            {
                capacity = givenCapacity;
                return true;
            }
            catch
            {
                return false;
            }
        }

        public List<ConnectionPoint> GiveMeYourConnectionPoints()
        {
            return listOfConnectionPoints;
        }
        public List<ConnectionPoint> GiveMeYourOutputConnectionPoints()
        {
            List<ConnectionPoint> currentOutputConnectionPoints = new List<ConnectionPoint>();
            foreach (ConnectionPoint item in GiveMeYourConnectionPoints())
            {
                if (item.IsOutput)
                {
                    currentOutputConnectionPoints.Add(item);
                }
            }
            return currentOutputConnectionPoints;
        }
        public List<ConnectionPoint> GiveMeYourInputConnectionPoints()
        {
            List<ConnectionPoint> inputConnPoints = new List<ConnectionPoint>();
            foreach (ConnectionPoint item in GiveMeYourConnectionPoints())
            {
                if (item.IsOutput == false)
                {
                    inputConnPoints.Add(item);
                }
            }
            return inputConnPoints;
        }

        public virtual void UpdateComponentFlow()
        {
            float flow = 0;
            foreach (ConnectionPoint cp in listOfConnectionPoints)
            {
                if (!cp.IsOutput)
                    flow += cp.CurrentFlow;
            }
            currentFlow = flow;
        }

    }


}


