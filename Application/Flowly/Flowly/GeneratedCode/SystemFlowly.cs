//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Flowly.GeneratedCode;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO; //because of FileStream
using System.Runtime.Serialization.Formatters.Binary; //because of BinaryFormatter
using System.Runtime.Serialization;//because of SerializationException
namespace Flowly
{
    /// <summary>
    /// Class named "SystemFlowly". Meant to possess many of the methods to manipulate, create, delete "ComponentDrawn"-s.
    /// Has a list for "Change"-s to keep track of them.
    /// Has a list meant to be a toolbox.
    /// </summary>
    public class SystemFlowly
    {
        /// <summary>
        /// toolbox of the program. Simpe list of "ToolboxComponent"-s. Make the difference between "ComponentDrawn" and "ToolboxComponent".
        /// </summary>
        private List<ToolboxComponent> listOfToolboxItems;

        private Grid grid;

        private List<Change> changes;


        public SystemFlowly(Grid grid)
        {
            this.grid = grid;
        }

        /// <summary>
        /// Checks if a particular area is free.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>True if it is, false otherwise.</returns>
        public virtual bool CheckFreeSpot(Rectangle r)
        {
            List<Rectangle> rectangles = grid.GetComponentsRectangles();
            foreach (Rectangle rect in rectangles)
            {
                if (r.IntersectsWith(rect)) return false;
            }
            return true;
        }

        /// <summary>
        /// After deleting a component makes a spot free.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool MakeSpotFree(int x, int y)
        {
            throw new System.NotImplementedException();
        }

        /// <summary>
        /// Opposite of the above method.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>True for successfull, false otherwise.</returns>
        public virtual bool MakeSpotBusy(int x, int y)
        {
            throw new System.NotImplementedException();
        }

        /// <summary>
        /// Creates a new instance of class "ComponentDrawn". 
        /// </summary>
        /// <param name="cName">component name</param>
        /// <param name="rectangle">The rectangle that the component will have</param>
        /// <param name="cCapacity">component capacity</param>
        /// <returns>True if successfully created, false otherwise.</returns>
        public virtual bool CreateComponentDrawn(ComponentName cName, Rectangle rectangle, int cCapacity)
        {
            /* Pump newPump = new Pump(r);
             List<ConnectionPoint> testListOfConnectionPoints = newPump.GiveMeYourConnectionPoints();
             foreach (ConnectionPoint testCP in testListOfConnectionPoints)
             {
                 g.DrawRectangle(Pens.Blue, testCP.rectangle);
             }*/
            ComponentDrawn cd = null;
            switch (cName)
            {
                case ComponentName.Merger:
                    cd = new Merger(rectangle);
                    break;
                case ComponentName.Pipe:
                    cd = new Pipe(rectangle);
                    break;
                case ComponentName.Pump:
                    cd = new Pump(rectangle);
                    break;
                case ComponentName.Sink:
                    cd = new Sink(rectangle);
                    break;
                case ComponentName.Splitter:
                    cd = new Splitter(rectangle, false);
                    break;
                case ComponentName.SplitterAdj:
                    cd = new Splitter(rectangle, true);
                    break;

                default:

                    return false;
            }
            if (cd == null)
            {
                return false;
            }
            else
            {
                grid.AddComponentDrawnToGridList(cd);
                grid.Paint(cd);
                return true;
            }

        }

        /// <summary>
        /// Deletes a given "ComponentDrawn".
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool DeleteComponent(ComponentDrawn givenComponent)
        {
            throw new System.NotImplementedException();
        }
        /// <summary>
        /// A "ComponentDrawn" is passed and the particular componentDrawn's properties should be changed.
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool EditComponentDrawn(ComponentDrawn givenComponent)
        {
            throw new System.NotImplementedException();
        }
        /// <summary>
        /// Deletes all "ComponentDrawn"-s from the grid.
        /// </summary>
        /// <param name="givenGrid"></param>
        /// <returns>True for successfull, false otherwise.</returns>
        public virtual bool ClearGrid(Grid givenGrid)
        {
            try
            {
                this.grid.Graphic.Clear(Color.White);
                this.grid.ListOfComponents.Clear();
                return true;
            }
            catch
            {
                MessageBox.Show("Something went wrong while clearing the grid!");
                return false;
            }
        }

        /// <summary>
        /// Saves the current grid as a file.
        /// </summary>
        /// <param name="givenGrid"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool SaveGrid(Grid givenGrid)
        {
            bool success = false;
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            if(saveFileDialog.ShowDialog()==DialogResult.OK)
            {

                FileStream myFileStream = null;
                BinaryFormatter myBinaryFormatter = null;

                try
                {
                    myFileStream = new FileStream(saveFileDialog.FileName, FileMode.Create, FileAccess.Write);
                    myBinaryFormatter = new BinaryFormatter();

                    SerializationObject newObject = new SerializationObject(givenGrid.Id, givenGrid.Name, givenGrid.ListOfComponents);
                    myBinaryFormatter.Serialize(myFileStream, newObject);
                    MessageBox.Show("Successfully saved!");
                    success = true;
                }

               catch(Exception e)
                {
                    MessageBox.Show("Somethign went wrong while saving!");
                    MessageBox.Show(e.Message);
                    success = false;
                }
                finally
                {
                    if (myFileStream != null)
                    { 
  
                    myFileStream.Close();
                        
                    }
                }
           

            }

            return success;

        }
    
    /// <summary>
    /// Creates a new grid.
    /// </summary>
    /// <returns>True if successfull, false otherwise.</returns>
    public virtual bool NewFile()
    {
        throw new System.NotImplementedException();
    }

        /// <summary>
        /// Opens already created and saved grid.
        /// </summary>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool OpenFile(PictureBox givenPictureBox)
    {
            bool success = false;
            OpenFileDialog openFileDialog = new OpenFileDialog();
            if(openFileDialog.ShowDialog()==DialogResult.OK)
            {
                FileStream myFileStream = null;
                BinaryFormatter myBinaryFormatter = null;
                try
                {
                    myFileStream = new FileStream(openFileDialog.FileName, FileMode.Open, FileAccess.Read);
                    myBinaryFormatter = new BinaryFormatter();

                    SerializationObject myNewOpenObj = (SerializationObject)myBinaryFormatter.Deserialize(myFileStream);
                    Grid myNewGrid = new Grid(givenPictureBox);
                    myNewGrid.Id = myNewOpenObj.Id;
                    myNewGrid.Name = myNewOpenObj.Name;
                    myNewGrid.ListOfComponents = myNewOpenObj.listCompDrawn;

                    this.grid = myNewGrid;
                    this.grid.PaintAllComponents();
                    success = true;
                }

                catch (Exception e)
                {
                    MessageBox.Show("Somethign went wrong while opening!");
                    MessageBox.Show(e.Message);
                    success = false;
                }
                finally
                {
                    if (myFileStream != null)
                    {

                        myFileStream.Close();

                    }
                }
            }
            return success;
    }
    /// <summary>
    /// Goes back to a state before a change is made.
    /// </summary>
    /// <returns>True if successfull, false otherwise.</returns>
    public virtual bool UndoLastChange()
    {
        throw new System.NotImplementedException();
    }
    /// <summary>
    /// Always the user makes a change, a new instance of "Change" class is created.
    /// </summary>
    /// <param name="givenDescription"></param>
    /// <returns>True if successfull, false otherwise.</returns>
    public virtual bool CreateChange(string givenDescription)
    {
        throw new System.NotImplementedException();
    }



}
}

