//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
namespace Flowly
{
    /// <summary>
    /// Sub class of the "ComponentDrawn" class. A particular component called - Merger. Nothing specific in it. Set diffCurrFlowPossible 
    /// needs to be false.
    /// </summary>
    public class Merger : ComponentDrawn
    {

        protected Rectangle rectangleSmallLeftUp;

        protected Rectangle rectangleSmallLeftDown;

        protected Rectangle rectangleCombRight;

        public Merger(Rectangle theRectangle) : base(theRectangle)
        {
           



            rectangleSmallLeftUp = new Rectangle();
            rectangleSmallLeftUp.X = rectangleBig.X;
            rectangleSmallLeftUp.Y = rectangleBig.Y;
            rectangleSmallLeftUp.Height = rectangleBig.Height / 2;
            rectangleSmallLeftUp.Width = rectangleBig.Width / 2;

            rectangleSmallLeftDown = new Rectangle();
            rectangleSmallLeftDown.X = rectangleBig.X;
            rectangleSmallLeftDown.Y = rectangleBig.Y + rectangleBig.Height / 2;
            rectangleSmallLeftDown.Height = rectangleBig.Height / 2;
            rectangleSmallLeftDown.Width = rectangleBig.Width / 2;


            rectangleCombRight = new Rectangle();
            rectangleCombRight.X = rectangleBig.X + rectangleBig.Width / 2;
            rectangleCombRight.Y = rectangleBig.Y;
            rectangleCombRight.Height = rectangleBig.Height;
            rectangleCombRight.Width = rectangleBig.Width / 2;

            CreateConnectionPoints();
        }

        public override bool CreateConnectionPoints()
        {
           


            try
            {
                ConnectionPoint connLeftUp = new ConnectionPoint(rectangleSmallLeftUp, this, false);
                ConnectionPoint connLeftDown = new ConnectionPoint(rectangleSmallLeftDown, this, false);
                ConnectionPoint connRightComb = new ConnectionPoint(rectangleCombRight, this, true);

                listOfConnectionPoints.Add(connLeftUp);
                listOfConnectionPoints.Add(connLeftDown);
                listOfConnectionPoints.Add(connRightComb);
                return true;
            }
            catch
            {
                return false;
            }
        }
    }
}

