//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Windows.Forms;

namespace Flowly
{
    /// <summary>
    /// Objects of this class will be the "drawing" place of the user. A grid will contain components in it.
    /// </summary>
    public class Grid
    {
        private List<ComponentDrawn> listOfComponents;

        private Graphics graphic;

        private int id;

        private string name;


        public Grid(PictureBox grid)
        {
            this.listOfComponents = new List<Flowly.ComponentDrawn>();
            this.graphic = grid.CreateGraphics();
        }



        /// <summary>
        /// Adds a component to the listOfComponents list.
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise</returns>
        public virtual bool AddComponentDrawnToGridList(ComponentDrawn givenComponent)
        {
            try {
                this.listOfComponents.Add(givenComponent);
                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("There are a problem adding the component to the grid.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }
        /// <summary>
        /// Opposite of the other method.
        /// </summary>
        /// <param name="givenComponent"></param>
        /// <returns>True if successfull, false otherwise.</returns>
        public virtual bool RemoveComponentDrawnFromGridList(ComponentDrawn givenComponent)
        {
            try
            {
                this.listOfComponents.Remove(givenComponent);
                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("There are a problem removing the component to the grid.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }

        public List<Rectangle> GetComponentsRectangles()
        {
            List<Rectangle> rect= new List<Rectangle>();
            foreach (ComponentDrawn component in this.listOfComponents)
            {

                rect.Add(component.RectangleBig);
            }
            return rect;
        }

        public void PaintAllComponents()
        {
            foreach (ComponentDrawn item in this.listOfComponents)
            {
                Paint(item);
            }
        }

        public void Paint(ComponentDrawn drawn)
        {
            Rectangle r = drawn.RectangleBig;
            graphic.DrawRectangle(Pens.Red, r);
            graphic.DrawImage(drawn.Image, r);
            List<ConnectionPoint> conPoints = drawn.GiveMeYourConnectionPoints();
            foreach (ConnectionPoint cp in conPoints)
            {
                graphic.DrawRectangle(Pens.Blue, cp.rectangle);
                
            }
        }

    }
}

